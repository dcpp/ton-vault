;; #!/usr/bin/func
;;

;; ---------------------------------- defines

int ApiOps::None() inline               { return 0; }
int ApiOps::Deposit() inline            { return 1; }
int ApiOps::Withdraw() inline           { return 2; }

int ApiEvent::Deposit() inline          { return 0x20000001; }
int ApiEvent::Withdraw() inline         { return 0x20000002; }

int Vault::Ok() inline                  { return 0x80000000; }
int Vault::WrongSender() inline         { return 0x80000001; }
int Vault::BadArg() inline              { return 0x80000002; }
int Vault::NoFunds() inline             { return 0x80000003; }
int Vault::NoOp() inline                { return 0x80000004; }

;; ---------------------------------- state

;; storage : {
;;   balances : {
;;     slice address : uint256 amount
;;   }

;; ---------------------------------- pure functions

(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";

;;
;; Serializes
;; addr_std$10 anycast:(Maybe Anycast) workchain_id:int8 address:bits256 = MsgAddressInt;
;; output is 264 bits
;;
slice pack_std_addr(int wc, int addr) {
    return begin_cell()
        .store_int(wc, 8)
        .store_uint(addr, 256)
        .end_cell()
        .begin_parse();
}

;; decode TON standard address and pack to 264 bits slice
;; returns (slice address)
slice pack_addr_from_std(slice addr) {
    (int addr_network, int addr_addr) = addr.parse_std_addr();
    return pack_std_addr(addr_network, addr_addr);
}

;; add 'balances'
;; returns (cell balances, int result)
(cell, int) add_balances(cell balances, slice from, int amount) {
    ;; look up for the sender address in the balances
    (slice from_record, int from_found) = balances.dict_get?(264, from);

    int from_balance = 0; 
    if (from_found != 0) {
        from_balance = from_record~load_grams();
    }

    from_balance += amount;

    ;; update the sender balance
    balances~dict_set_builder(264, from, begin_cell().store_grams(from_balance));

    return (balances, Vault::Ok());
}

;; sub 'balances'
;; returns (cell balances, int result)
(cell, int) sub_balances(cell balances, slice from, int amount) {
    ;; look up for the sender address in the balances
    (slice from_record, int from_found) = balances.dict_get?(264, from);
    if (from_found == 0) {
        return (balances, Vault::WrongSender());
    }

    int from_balance = from_record~load_grams();

    if (from_balance < amount) {
        return (balances, Vault::NoFunds());
    }
    from_balance = from_balance - amount;

    ;; update the sender balance
    balances~dict_set_builder(264, from, begin_cell().store_uint(from_balance, 256));

    return (balances, Vault::Ok());
}

;; ---------------------------------- impure functions

;; send message to another account
() send_message(slice to_addr, int action, int query_id, int grams) impure {
	;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool 
	;;                src:MsgAddress -> 011000 0x18
	builder msg = begin_cell()
		.store_uint (0x18, 6)
        .store_uint(0x4, 3)
		.store_slice(to_addr)
		.store_grams(grams)
		.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
		.store_uint(action, 32)
		.store_uint(query_id, 64);

	send_raw_message(msg.end_cell(), 1);
}

;; save data in the contract storage
() store_data(cell balances) impure {
    set_data(
        begin_cell()
        .store_uint(1, 1)
        .store_dict(balances)
        .end_cell());
}

;; load data from the contract storage
(int, cell) load_data() {
    slice ds = get_data().begin_parse();
    int initialized = ds~load_uint(1);
    cell dict = ds~load_dict();
    ds.end_parse();
    return (initialized, dict);
}

int deposit_storage_fee() asm "21200000 PUSHINT"; ;; 0.0212 TON

;; deposit 'amount' grams to the 'sender'
() deposit(slice from, int query_id, int amount, slice payload) impure {
    int fee = deposit_storage_fee();

    if (amount <= fee) {
        throw(Vault::BadArg());
    }

    (int initialized, cell balances) = load_data();
    slice from_addr = pack_addr_from_std(from);

    (balances, int result) = add_balances(balances, from_addr, amount - fee);

    if (result != Vault::Ok()) {
        throw(result);
    }

    store_data(balances);

    return send_message(from_addr, ApiEvent::Deposit(), query_id, 0);
}

;; withdraw 'amount' grams to the 'sender'
() withdraw(slice to, int query_id, int amount, slice payload) impure {
    if (amount == 0) {
        throw(Vault::BadArg());
    }

    (int initialized, cell balances) = load_data();
    slice to_addr = pack_addr_from_std(to);

    (balances, int result) = sub_balances(balances, to_addr, amount);

    if (result != Vault::Ok()) {
        throw(result);
    }

    store_data(balances);

    return send_message(to, ApiEvent::Withdraw(), query_id, amount);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    slice cs = in_msg_cell.begin_parse();
    int flags = cs~load_uint(4);
    slice sender = cs~load_msg_addr();

    ;; ignore all bounced messages
    ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    if (flags & 1) {
        return ();
    }

    if (in_msg.slice_bits() == 0) {
        ;; inbound message has empty body
        return ();
    }

    int op = in_msg~load_uint(32);
    (op, cs) = parse_msg(op, in_msg);

    int query_id = cs~load_uint(64);

    ;; deposit grams
    ;; args ()
    if (op == ApiOps::Deposit()) {
        return deposit(sender, query_id, msg_value, cs);
    }

    ;; withdraw grams
    ;; args (uint256 grams)
    if (op == ApiOps::Withdraw()) {
        int grams = cs~load_uint(64);
        return withdraw(sender, query_id, grams, cs);
    }

    throw(Vault::NoOp());
}

() recv_external(slice in_msg) impure {
    (int initialized, cell balances) = load_data();
    throw_unless(60, initialized == 0);
    accept_message();
    store_data(balances);
}

;; ---------------------------------- getters

;; get deposited total balance
int balance() method_id {
	return get_balance().pair_first();
}

;; get balance of user
int balanceof(int from_network, int from_address) method_id {
	(int initialized, cell balances) = load_data();
    slice packed = pack_std_addr(from_network, from_address);
    (slice sender_record, int sender_found) = balances.dict_get?(264, packed);
    if (sender_found == 0) {
        return 0;
    }

    return sender_record~load_grams();
}

